import PDFDocument from 'pdfkit';
import { CRFValidationResult } from '../types/crf-validation-types';
import { createModuleLogger } from '../../../utils/logger';

const logger = createModuleLogger('simple-crf-pdf-exporter');

/**
 * Simple, safe PDF exporter that avoids stack overflow issues
 * Used as fallback when the main exporter fails
 */
export class SimpleCRFPDFExporter {
  /**
   * Generate a simple PDF report with basic information only
   */
  async exportToPDF(validationResult: CRFValidationResult): Promise<Buffer> {
    logger.info('Generating simple CRF validation PDF', {
      validationId: validationResult.validationId,
      overallScore: validationResult.overallScore,
    });
    
    return new Promise((resolve, reject) => {
      try {
        const doc = new PDFDocument({
          size: 'A4',
          margins: { top: 72, bottom: 72, left: 72, right: 72 },
          info: {
            Title: 'CRF Validation Report (Simplified)',
            Author: 'Clinical DMP Generator',
            Subject: 'CRF Validation Summary',
          },
        });
        
        const chunks: Buffer[] = [];
        doc.on('data', chunk => chunks.push(chunk));
        doc.on('end', () => resolve(Buffer.concat(chunks)));
        
        // Title
        doc.fontSize(20)
          .font('Helvetica-Bold')
          .text('CRF Validation Report', 72, 100, { align: 'center' });
        
        doc.fontSize(12)
          .font('Helvetica')
          .moveDown(2);
        
        // Basic info
        const info = [
          `Validation ID: ${validationResult.validationId}`,
          `Overall Score: ${validationResult.overallScore}/100`,
          `Generated: ${new Date().toLocaleDateString()}`,
          '',
          'Summary:',
          `- Completeness Score: ${validationResult.completenessScore || 'N/A'}`,
          `- Quality Score: ${validationResult.qualityScore || 'N/A'}`,
          `- Compliance Score: ${validationResult.complianceScore || 'N/A'}`,
          '',
          `Total Findings: ${validationResult.validationFindings?.length || 0}`,
          `Critical Issues: ${validationResult.validationFindings?.filter(f => f.severity === 'Critical').length || 0}`,
          `Total Recommendations: ${validationResult.recommendations?.length || 0}`,
          '',
          'Note: This is a simplified report due to processing limitations.',
          'Please use the JSON export for complete details.',
        ];
        
        info.forEach(line => {
          doc.text(line, 72, doc.y);
          doc.moveDown(0.5);
        });
        
        // Add some key findings if available (limited to 10)
        if (validationResult.validationFindings && validationResult.validationFindings.length > 0) {
          doc.moveDown(1);
          doc.fontSize(14)
            .font('Helvetica-Bold')
            .text('Key Findings (First 10):', 72, doc.y);
          
          doc.fontSize(10)
            .font('Helvetica')
            .moveDown(0.5);
          
          validationResult.validationFindings.slice(0, 10).forEach((finding, index) => {
            const text = `${index + 1}. [${finding.severity}] ${finding.finding?.substring(0, 100) || 'No description'}${finding.finding && finding.finding.length > 100 ? '...' : ''}`;
            doc.text(text, 72, doc.y, { width: doc.page.width - 144 });
            doc.moveDown(0.3);
          });
        }
        
        // Footer
        doc.fontSize(8)
          .text('Generated by Clinical DMP Generator', 72, doc.page.height - 50, {
            align: 'center'
          });
        
        doc.end();
      } catch (error) {
        reject(error);
      }
    });
  }
}

export const simpleCRFPdfExporter = new SimpleCRFPDFExporter();